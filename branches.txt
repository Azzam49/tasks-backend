
GENERAL_NOTES:
    - Check and follow existing Django course on explain the DB, migrations, DB state before/after migration, Raw sql, etc..
    - Can give lectures about (install postman, using postman)


1_feature/init-project
2_feature/create-django-app
3_feature/django-mvc-our-first-view

---------------------------------------------------------------------
STATUS : DONE
BRANCH : 4_feature/create-tags-model

Notes:
    - dispaly sql lite DB
    - talk about migration files and it's 2 commands
    - check db after applied the migration file
---------------------------------------------------------------------

---------------------------------------------------------------------
STATUS : DONE
BRANCH : 5_feature/add-tag-model-to-admin-site

Notes:
    - Describe what is admin site
    - user createsuperuser command
    - set some features of admin site, (can check existing django course for that)
---------------------------------------------------------------------

---------------------------------------------------------------------
STATUS : DONE
BRANCH : 6_feature/create-get-api-for-tags

Notes:
    - install and talk about djangorestframework
    - talk about the used imports
    - talk about the used orm query
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 7_feature/create-tasks-model

- Tasks Model with columns = (id, owner (FK with User model), title, description, tag (FK with Tag model), created_at, status)
- Describe and show columns of the Django's User model
- Import User model and Create FK relation with User model
- Create FK relation with Tag model
- Set values of status as options ('Completed', 'Pending')
- Set default value for status as 'Pending'
- Set default value for created_at the current time

Notes:
- Show the Django default User model columns
- Talk about FK relation and ON_DELETE
- Talk about options for status
- Talk about default value for created_at
- Note : might need split this branch into 2 lectures
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 8_feature/add-tasks-model-to-admin-site

- Add tasks model to admin site
- Set some features of admin site (can check existing django course for that)
---------------------------------------------------------------------



---------------------------------------------------------------------
STATUS : DONE
BRANCH : 9_feature/create-get-tasks-api

- Create GET tasks API, it's fields shall follow the fields of Tasks page
- Create the serilizer and explain it's features

Note:
    - for this lecture, open React app to make sure the response of API is exact same as the useState of Tasks page
    - might need split this into 2 lectures (api view function & serializer class)
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 10_feature/create-post-task-api

- Create POST task API, it's fields shall follow the fields of dialog modal of Tasks page
- Create the serilizer and explain it's features

---------------------------------------------------------------------

---------------------------------------------------------------------
STATUS : DONE
BRANCH : 11_feature/custom-validation-for-task-post-api

- Add validate method on the post task serilizer
- Use the valdiate method and try catch execption on view function to return error on api
---------------------------------------------------------------------



---------------------------------------------------------------------
STATUS : DONE
BRANCH : 12_feature/create-put-task-api

- Create put task api
- Re-use existing serializer and define create/update methods
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 13_feature/customize-serializer-for-create-update-apis

- Define create/update methods on serializer to show that able customize function for create/update apis
---------------------------------------------------------------------

---------------------------------------------------------------------
STATUS : DONE
BRANCH : 14_feature/create-delete-task-api

- Create delete task api
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 15_feature/create-api-for-change-task-status-to-completed

- Create api that takes task_id and set the status to Completed
---------------------------------------------------------------------



---------------------------------------------------------------------
STATUS : DONE
BRANCH : 16_feature/setup-corsheader-to-allow-api-call-from-frontend

- install django-cors-header and setup it on settings.py
    - pip install django-cors-headers
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 17_feature/create-api-for-fetch-single-task-by-id

- Create api that fetches single task by id
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 18_feature/create-api-for-fetch-pending-tasks

- Create api that fetches tasks with pending status
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 19_feature/create-api-for-fetch-completed-tasks

- Create api that fetches tasks with completed status
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 20_feature/setup-jwt-token-authentication

- Setup jwt token authentication
- Create token-auth api
- Secure api to require token authentication

useful:
    - https://django-rest-framework-simplejwt.readthedocs.io/en/latest/getting_started.html
    - pip install djangorestframework-jwt
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : DONE
BRANCH : 21_bugfix/fix-response-of-task-to-completed-api

- return a dict to fix error on react side when json parsing the response
    - this is part of fixes of the FE : 38_feature/fix-notifcation-and-standardlize-them-from-api-controller
---------------------------------------------------------------------

---------------------------------------------------------------------
STATUS : DONE
BRANCH : 22_feature/create-register-user-api

- Create register user api
---------------------------------------------------------------------

---------------------------------------------------------------------
STATUS : WORKING-ON
BRANCH : 23_feature/remove-authentication-required-from-register-user-api

- remove authentication required on register user api
---------------------------------------------------------------------

---------------------------------------------------------------------
STATUS : TODO
BRANCH : 23_feature/add-username-and-userid-on-token-api-response

- Add username and user-id data on the token/ endpoint with the access token
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : EXTRA
BRANCH : ?_feature/optimize-the-tasks-get-api

- Print raw sql to display the issue
- Use select_related to fix the optimize
---------------------------------------------------------------------


---------------------------------------------------------------------
STATUS : EXTRA
BRANCH : ?_feature/use-class-based-view-for-the-apis

- Use Class Based Views to create same apis with same response
    - this will let student learned both view functions and class based views
---------------------------------------------------------------------